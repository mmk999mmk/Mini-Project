test
--------------------------------------------------------------------------------------------------------------------
MERGE INTO "HISTORICAL_LOAD"."GCP"."CUSTOMERS_DATASET" fcd
USING "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."CUSTOMERS_DATASET" cd ON fcd.CUSTOMER_ID = cd.CUSTOMER_ID
when matched then
update set 
fcd.CUSTOMER_ID=cd.CUSTOMER_ID,
fcd.CUSTOMER_UNIQUE_ID=cd.CUSTOMER_UNIQUE_ID,
fcd.CUSTOMER_ZIP_CODE_PREFIX=cd.CUSTOMER_ZIP_CODE_PREFIX,
fcd.CUSTOMER_CITY=cd.CUSTOMER_CITY,
fcd.CUSTOMER_STATE=cd.CUSTOMER_STATE
WHEN NOT MATCHED THEN INSERT (CUSTOMER_ID,CUSTOMER_UNIQUE_ID,CUSTOMER_ZIP_CODE_PREFIX,CUSTOMER_CITY,CUSTOMER_STATE) values (cd.CUSTOMER_ID,
cd.CUSTOMER_UNIQUE_ID,cd.CUSTOMER_ZIP_CODE_PREFIX,cd.CUSTOMER_CITY,cd.CUSTOMER_STATE);

delete from "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."CUSTOMERS_DATASET";
------------------------------------------------------------------------------------------------------------------
MERGE INTO "HISTORICAL_LOAD"."GCP"."GEOLOCATION_DATASET" fgd
USING "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."GEOLOCATION_DATASET" gd ON fgd.GEOLOCATION_LAT=gd.GEOLOCATION_LAT and fgd.GEOLOCATION_LNG=gd.GEOLOCATION_LNG
when matched then
update set 
fgd.GEOLOCATION_ZIP_CODE_PREFIX=gd.GEOLOCATION_ZIP_CODE_PREFIX,
fgd.GEOLOCATION_LAT=gd.GEOLOCATION_LAT	,
fgd.GEOLOCATION_LNG=gd.GEOLOCATION_LNG	,
fgd.GEOLOCATION_CITY=gd.GEOLOCATION_CITY	,
fgd.GEOLOCATION_STATE=gd.GEOLOCATION_STATE
WHEN NOT MATCHED THEN INSERT (GEOLOCATION_ZIP_CODE_PREFIX,GEOLOCATION_LAT,GEOLOCATION_LNG,GEOLOCATION_CITY,GEOLOCATION_STATE)
values (gd.GEOLOCATION_ZIP_CODE_PREFIX,gd.GEOLOCATION_LAT,gd.GEOLOCATION_LNG,gd.GEOLOCATION_CITY,gd.GEOLOCATION_STATE);

delete from "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."GEOLOCATION_DATASET";
-------------------------------------------------------------------------------------------------------------------
MERGE INTO "HISTORICAL_LOAD"."GCP"."SELLERS_DATASET" fsd
USING "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."SELLERS_DATASET" sd ON fsd.SELLER_ID=sd.SELLER_ID
when matched then
update set 
fsd.SELLER_ID=sd.SELLER_ID,fsd.SELLER_ZIP_CODE_PREFIX=sd.SELLER_ZIP_CODE_PREFIX,fsd.SELLER_CITY=sd.SELLER_CITY,
fsd.SELLER_STATE=sd.SELLER_STATE WHEN NOT MATCHED THEN INSERT (SELLER_ID,SELLER_ZIP_CODE_PREFIX,SELLER_CITY,SELLER_STATE)
values (sd.SELLER_ID,sd.SELLER_ZIP_CODE_PREFIX,sd.SELLER_CITY,sd.SELLER_STATE);


delete from "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."SELLERS_DATASET";
-------------------------------------------------------------------------------------------------------------------------
MERGE INTO "HISTORICAL_LOAD"."GCP"."ORDER_ITEMS_DATASET" foid
USING "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."ORDER_ITEMS_DATASET" oid ON foid.ORDER_ITEM_ID = oid.ORDER_ITEM_ID
when matched then
update set 
foid.ORDER_ITEM_ID=oid.ORDER_ITEM_ID,
foid.PRODUCT_ID=oid.PRODUCT_ID,
foid.SELLER_ID=oid.SELLER_ID,
foid.SHIPPING_LIMIT_DATE=oid.SHIPPING_LIMIT_DATE,
foid.PRICE=oid.PRICE,
foid.FREIGHT_VALUE=oid.FREIGHT_VALUE
WHEN NOT MATCHED THEN INSERT (ORDER_ID,ORDER_ITEM_ID,PRODUCT_ID,SELLER_ID,SHIPPING_LIMIT_DATE,PRICE,FREIGHT_VALUE) values 
(oid.ORDER_ID,oid.ORDER_ITEM_ID,oid.PRODUCT_ID,oid.SELLER_ID,oid.SHIPPING_LIMIT_DATE,oid.PRICE,oid.FREIGHT_VALUE);

delete from "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."ORDER_ITEMS_DATASET";
------------------------------------------------------------------------------------------------------------------------------------------
MERGE INTO "HISTORICAL_LOAD"."GCP"."PRODUCTS_DATASET" fpd
USING "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."PRODUCTS_DATASET" pd ON fpd.PRODUCT_ID = pd.PRODUCT_ID
when matched then
update set 
fpd.PRODUCT_ID=pd.PRODUCT_ID,
fpd.PRODUCT_CATEGORY_NAME=pd.PRODUCT_CATEGORY_NAME,
fpd.PRODUCT_NAME_LENGHT=pd.PRODUCT_NAME_LENGHT,
fpd.PRODUCT_DESCRIPTION_LENGHT=pd.PRODUCT_DESCRIPTION_LENGHT,
fpd.PRODUCT_PHOTOS_QTY=pd.PRODUCT_PHOTOS_QTY,
fpd.PRODUCT_WEIGHT_G=pd.PRODUCT_WEIGHT_G,
fpd.PRODUCT_LENGTH_CM=pd.PRODUCT_LENGTH_CM,
fpd.PRODUCT_HEIGHT_CM=pd.PRODUCT_HEIGHT_CM,
fpd.PRODUCT_WIDTH_CM=pd.PRODUCT_WIDTH_CM
WHEN NOT MATCHED THEN INSERT (PRODUCT_ID,
PRODUCT_CATEGORY_NAME ,PRODUCT_NAME_LENGHT,PRODUCT_DESCRIPTION_LENGHT,PRODUCT_PHOTOS_QTY,PRODUCT_WEIGHT_G,PRODUCT_LENGTH_CM ,PRODUCT_HEIGHT_CM,PRODUCT_WIDTH_CM ) values 
(pd.PRODUCT_ID,pd.PRODUCT_CATEGORY_NAME,pd.PRODUCT_NAME_LENGHT,pd.PRODUCT_DESCRIPTION_LENGHT,pd.PRODUCT_PHOTOS_QTY,pd.PRODUCT_WEIGHT_G,pd.PRODUCT_LENGTH_CM,pd.PRODUCT_HEIGHT_CM,pd.PRODUCT_WIDTH_CM);

delete from "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."PRODUCTS_DATASET";
-----------------------------------------------------

MERGE INTO "HISTORICAL_LOAD"."GCP"."PRODUCT_CATEGORY_NAME_TRANSLATION" fpc
USING "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."PRODUCT_CATEGORY_NAME_TRANSLATION" pc ON fpc.PRODUCT_CATEGORY_NAME = pc.PRODUCT_CATEGORY_NAME
when matched then
update set 
fpc.PRODUCT_CATEGORY_NAME=pc.PRODUCT_CATEGORY_NAME,
fpc.PRODUCT_CATEGORY_NAME_ENGLISH=pc.PRODUCT_CATEGORY_NAME_ENGLISH
WHEN NOT MATCHED THEN INSERT (PRODUCT_CATEGORY_NAME,
PRODUCT_CATEGORY_NAME_ENGLISH) values 
(pc.PRODUCT_CATEGORY_NAME,
pc.PRODUCT_CATEGORY_NAME_ENGLISH);

delete from "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."PRODUCT_CATEGORY_NAME_TRANSLATION";
-----------------------------------------------------
MERGE INTO "HISTORICAL_LOAD"."GCP"."ORDERS_DATASET" fod
USING "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."ORDERS_DATASET" od ON fod.ORDER_ID = od.ORDER_ID
when matched then
update set 
fod.ORDER_ID=od.ORDER_ID,
fod.CUSTOMER_ID=od.CUSTOMER_ID,
fod.ORDER_STATUS=od.ORDER_STATUS,
fod.ORDER_PURCHASE_TIMESTAMP=od.ORDER_PURCHASE_TIMESTAMP,
fod.ORDER_APPROVED_AT=od.ORDER_APPROVED_AT,
fod.ORDER_DELIVERED_CARRIER_DATE=od.ORDER_DELIVERED_CARRIER_DATE,
fod.ORDER_DELIVERED_CUSTOMER_DATE=od.ORDER_DELIVERED_CUSTOMER_DATE,
fod.ORDER_ESTIMATED_DELIVERY_DATE=od.ORDER_ESTIMATED_DELIVERY_DATE
WHEN NOT MATCHED THEN INSERT (ORDER_ID,CUSTOMER_ID,ORDER_STATUS,ORDER_PURCHASE_TIMESTAMP,ORDER_APPROVED_AT,ORDER_DELIVERED_CARRIER_DATE,ORDER_DELIVERED_CUSTOMER_DATE,
ORDER_ESTIMATED_DELIVERY_DATE) values 
(od.ORDER_ID,od.CUSTOMER_ID,od.ORDER_STATUS,od.ORDER_PURCHASE_TIMESTAMP,od.ORDER_APPROVED_AT,od.ORDER_DELIVERED_CARRIER_DATE,od.ORDER_DELIVERED_CUSTOMER_DATE,od.ORDER_ESTIMATED_DELIVERY_DATE);


delete from "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."ORDERS_DATASET";
------------------------------------------------------------
MERGE INTO "HISTORICAL_LOAD"."GCP"."ORDER_PAYMENTS_DATASET" fopd
USING "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."ORDER_PAYMENTS_DATASET" opd ON fopd.ORDER_ID = opd.ORDER_ID
when matched then
update set 
fopd.ORDER_ID=opd.ORDER_ID,
fopd.PAYMENT_SEQUENTIAL=opd.PAYMENT_SEQUENTIAL,
fopd.PAYMENT_TYPE=opd.PAYMENT_TYPE,
fopd.PAYMENT_INSTALLMENTS=opd.PAYMENT_INSTALLMENTS,
fopd.PAYMENT_VALUE=opd.PAYMENT_VALUE
WHEN NOT MATCHED THEN INSERT (ORDER_ID,PAYMENT_SEQUENTIAL,PAYMENT_TYPE,PAYMENT_INSTALLMENTS,PAYMENT_VALUE) values 
(opd.ORDER_ID,opd.PAYMENT_SEQUENTIAL,opd.PAYMENT_TYPE,opd.PAYMENT_INSTALLMENTS,opd.PAYMENT_VALUE);

delete from "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."ORDER_PAYMENTS_DATASET";
----------------------------------------------------------
MERGE INTO "HISTORICAL_LOAD"."GCP"."ORDER_REVIEWS_DATASET" ford
USING "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."ORDER_REVIEWS_DATASET" ord ON ford.REVIEW_ID = ord.REVIEW_ID
when matched then
update set 
ford.REVIEW_ID=ord.REVIEW_ID,
ford.ORDER_ID=ord.ORDER_ID,
ford.REVIEW_SCORE=ord.REVIEW_SCORE,
ford.REVIEW_COMMENT_TITLE=ord.REVIEW_COMMENT_TITLE,
ford.REVIEW_COMMENT_MESSAGE=ord.REVIEW_COMMENT_MESSAGE,
ford.REVIEW_CREATION_DATE=ord.REVIEW_CREATION_DATE,
ford.REVIEW_ANSWER_TIMESTAMP=ord.REVIEW_ANSWER_TIMESTAMP
WHEN NOT MATCHED THEN INSERT (REVIEW_ID,ORDER_ID,REVIEW_SCORE,REVIEW_COMMENT_TITLE,REVIEW_COMMENT_MESSAGE,REVIEW_CREATION_DATE,REVIEW_ANSWER_TIMESTAMP) values 
(ord.REVIEW_ID,ord.ORDER_ID,ord.REVIEW_SCORE,ord.REVIEW_COMMENT_TITLE,ord.REVIEW_COMMENT_MESSAGE,ord.REVIEW_CREATION_DATE,ord.REVIEW_ANSWER_TIMESTAMP);

delete from "HISTORICAL_LOAD"."GOOGLE_CLOUD_POSTGRESQL_PUBLIC"."ORDER_REVIEWS_DATASET";
---------------------------------------------------------------------------------------------------------------